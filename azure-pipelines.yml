trigger:
  branches:
    include:
      - main

pool:
  vmImage: ubuntu-latest

steps:
  # ✅ Step 1: Checkout the API Server Repository
  - checkout: self
    displayName: "Checkout API Server"

  # ✅ Step 2: Start API Server in the Background
  - script: |
      cd fx_trader_server
      npm ci
      npm start &
      echo "✅ API Server is starting in the background."
    displayName: "Start API Server in Background"

  # ✅ Step 3: Clone Playwright Test Repository
  - script: |
      git clone https://github.com/sd576/Playwright-API-Tests API_Playwright/fx_trader_api
      echo "✅ Cloned Playwright Test Repo."
    displayName: "Clone Playwright Test Repo"

  # ✅ Step 4: Install Dependencies for Playwright Tests
  - script: |
      cd API_Playwright/fx_trader_api
      npm ci
      echo "✅ Installed Playwright and dependencies."
    displayName: "Install Playwright Dependencies"

  # ✅ Step 5: Wait for API Server to be Ready
  - script: |
      npm install -g wait-on
      wait-on http://localhost:3000/api/nostro-accounts
      echo "✅ API Server is ready."
    displayName: "Wait for API Server Readiness"

  # ✅ Step 6: Debugging - Check Directory and Test Files
  - script: |
      pwd
      ls -la
      cd API_Playwright/fx_trader_api
      ls -la src/tests/api
      echo "✅ Directory and test files verified."
    displayName: "Check Current Directory and List Test Files"

  # ✅ Step 7: Run Playwright Tests
  - script: |
      cd API_Playwright/fx_trader_api
      npx playwright test src/tests/api --reporter=junit --output=test-results
      echo "✅ Playwright tests completed."
    displayName: "Run Playwright Tests"

  # ✅ Step 8: Publish Test Results
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: "JUnit"
      testResultsFiles: "API_Playwright/fx_trader_api/test-results/*.xml"
      mergeTestResults: true
    displayName: "Publish Test Results"

  # ✅ Step 9: Publish Playwright HTML Report
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: "API_Playwright/fx_trader_api/playwright-report"
      artifact: playwright-report
      publishLocation: pipeline
    displayName: "Publish Playwright Report"
    condition: succeededOrFailed()
